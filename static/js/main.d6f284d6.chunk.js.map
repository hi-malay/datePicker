{"version":3,"sources":["logo.svg","constants/constant.js","component/index.js","App.js","reportWebVitals.js","index.js"],"names":["API","Index","componentDidMount","axios","get","then","response","setState","user_data","data","members","api_fail","catch","error","console","log","api_error","openModal","value","open_modal","current_data","handleClose","date_match_modal","errorValid","selected_date","handleCloseSub","handleDateChange","date","findDate","date_match","state","CurDate","ConvertingDateToString","getDate","getMonth","getFullYear","activity_periods","map","d","splitArry","start_time","split","NewDate","Date","NewDateString","this","className","onClick","real_name","id","Dialog","open","onClose","aria-labelledby","aria-describedby","tz","end_time","selected","onChange","name","placeholderText","dateFormat","Button","variant","color","DialogActions","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6f284d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const API = {\n    'URL': \"https://raw.githubusercontent.com/mjroidu/Dummy-Data/master/DummyJson\",\n}\n","import React, { Component } from 'react';\nimport \"./style.css\"\nimport \"axios\"\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nimport { API } from \"../constants/constant\"\n\nclass Index extends Component {\n    constructor() {\n        super()\n        this.state = {\n            user_data: [],\n            api_fail: false,\n            api_error: \"\",\n            open_modal: false,\n            current_data: [],\n            selected_date: new Date(),\n            errorValid: false,\n            date_match: false,\n            date_match_modal: false\n        }\n    }\n\n    componentDidMount = () => {\n        axios.get(API.URL)\n            .then((response) => {\n                // handle success\n                this.setState({ user_data: response.data.members, api_fail: false })\n            })\n            .catch((error) => {\n                // handle error\n                console.log(\"hi\", error.response)\n                this.setState({ api_error: error.response, api_fail: true })\n            })\n    }\n    openModal = (value) => {\n        this.setState({ open_modal: true, current_data: value })\n    }\n\n    handleClose = () => {\n        this.setState({ open_modal: false, date_match_modal: false, errorValid: false, selected_date: '' })\n    };\n    handleCloseSub = () => {\n        this.setState({ date_match_modal: false, errorValid: false, selected_date: '' })\n    };\n    handleDateChange = (date) => {\n        this.setState({ selected_date: date, errorValid: false })\n    }\n\n    findDate = () => {\n        this.setState({ date_match_modal: true, date_match: false })\n        if (this.state.selected_date === \"\") {\n            this.setState({ errorValid: true })\n            return;\n        }\n        const CurDate = this.state.selected_date\n        const ConvertingDateToString = CurDate.getDate() + \"-\" + (CurDate.getMonth() + 1) + \"-\" + CurDate.getFullYear()\n        this.state.current_data.activity_periods.map((d) => {\n            const splitArry = d.start_time.split('  ')\n            const NewDate = new Date(splitArry[0]);\n            const NewDateString = NewDate.getDate() + \"-\" + (NewDate.getMonth() + 1) + \"-\" + NewDate.getFullYear()\n\n            if (ConvertingDateToString === NewDateString) {\n                this.setState({ date_match: true, date_match_modal: true })\n            }\n\n        })\n\n    }\n    render() {\n        const { user_data, api_fail, date_match, date_match_modal, api_error, open_modal, errorValid, current_data, selected_date } = this.state\n        console.log(\"hi\", current_data.activity_periods)\n        return (\n            <div className=\"main-div\">\n                <h1 className=\"heading-title\">Full Throttle</h1>\n                {!api_fail ?\n                    <>{\n                        user_data.map((value) => (\n                            <div className=\"child-div\" key={value.id} onClick={() => this.openModal(value)}>\n                                {value.real_name}\n                            </div>\n                        ))\n                    }</>\n                    :\n                    <>\n                        <div className=\"child-div\">\n                            Sorry! This api is giving no {api_error} response\n                        </div>\n                    </>\n                }\n                {open_modal ?\n                    <>\n                        <Dialog\n                            open={open_modal}\n                            onClose={this.handleClose}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n                            <h3 className=\"modal-title\">{current_data.real_name}</h3>\n                            <h3 className=\"modal-subtitle\"> Location: {current_data.tz}</h3>\n                            {\n                                current_data?.activity_periods.map((data) => (\n                                    <>\n                                        <h3 className=\"modal-subtitle2\"><b>Start Time:</b> {data.start_time}\n                                            <hr className=\"divider\"></hr>\n                                            <b>End Time: </b>{data.end_time}</h3>\n                                    </>\n                                ))\n                            }\n                            <div className=\"date-styling\">\n                                <DatePicker selected={selected_date}\n                                    onChange={date => this.handleDateChange(date)}\n                                    name=\"startDate\"\n                                    placeholderText=\"Enter Date\"\n                                    dateFormat=\"MM/dd/yyyy\"\n                                />\n                                {errorValid ? <div className=\"invalid-error\">invalid date</div> : \"\"}\n                            </div>\n                            <div className=\"date-styling\">\n                                <Button variant=\"contained\" className=\"btn-class\" color=\"primary\" onClick={this.findDate}>Submit Date</Button>\n                            </div>\n                            <DialogActions>\n                                <Button onClick={this.handleClose} color=\"primary\">\n                                    Close\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <Dialog\n                            open={date_match_modal}\n                            onClose={this.handleCloseSub}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n                            {date_match ?\n                                <>\n                                    <h3 className=\"modal-title\">Its a Match</h3>\n                                    <h3 className=\"modal-subtitle\"> Name: {current_data.real_name}</h3>\n                                    <h3 className=\"modal-subtitle\"> Location: {current_data.tz}</h3>\n                                </> :\n                                <>\n                                    <h3 className=\"modal-title\">Oops! your date didn't matched'</h3>\n                                </>\n                            }\n\n                            <DialogActions>\n                                <Button onClick={this.handleCloseSub} color=\"primary\">\n                                    Close\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </>\n                    :\n                    \"\"\n                }\n\n                <h4 className=\"footer\">By: Malay Mishra</h4>\n            </div>\n        );\n    }\n}\n\nexport default Index;","import logo from './logo.svg';\nimport './App.css';\nimport UserData from './component/index'\nfunction App() {\n  return (\n    <div className=\"App main-pad\">\n      <UserData />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}